1. Что такое Big O
«Хорошо, в этой лекции мы поговорим о том, что такое Big O. По определению, Big O — это язык и метрика, которые мы используем для описания эффективности алгоритмов.

Без понимания нотации Big O невозможно разрабатывать эффективные алгоритмы.

Если вы не знаете, когда ваш алгоритм ускоряется или замедляется, вы не сможете адекватно оценить производительность вашей программы.

По сути, Big O даёт нам способ описать, как время выполнения приложения растёт с увеличением размера входных данных.»

2. Пример из жизни: передача файла
«Рассмотрим реальный пример.

Представьте ситуацию: у вас есть файл на жёстком диске, и вам нужно отправить его другу.

Причём сделать это как можно быстрее.

Как лучше поступить?

Первое, что приходит в голову, — отправить его по электронной почте, через FTP или другой способ цифровой передачи.

Это правильный выбор, если файл небольшой: такой способ быстрее, чем физическая доставка.

Но что, если файл очень-очень большой?

Может ли оказаться, что быстрее доставить его физически, например, самолётом?

Да, так и есть.

Передача терабайтного файла электронным способом может занять больше суток.

А доставка его через страну на самолёте будет намного быстрее.

Если дело срочное, такой вариант может быть предпочтительнее.

Как видите, способ доставки зависит от размера файла.

В первом случае время передачи файла увеличивается по мере роста его размера.

Во втором случае, при физической доставке, время передачи не зависит от размера файла.

Неважно, везёте ли вы терабайтный файл или гигабайтный: время перелёта остаётся постоянным.»

3. Определение временной сложности
«В компьютерных науках это называется временной сложностью.

Это способ показать, как время выполнения функции увеличивается с ростом размера входных данных.

Возвращаясь к примеру с передачей файла, можно заметить: электронная передача имеет линейную зависимость времени от размера файла.

На графике это показано линией: чем больше размер файла, тем больше времени требуется для передачи.

В случае физической доставки, даже при увеличении размера файла, время остаётся постоянным.

Оно не меняется.»

4. Big O на технических собеседованиях
«Понимание Big O критически важно при прохождении технических собеседований, потому что этот вопрос обязательно возникнет.»

5. Big O в коде: два примера
«Теперь рассмотрим это на примере кода.

Допустим, у нас есть два варианта кода: код первый и код второй.

Как определить, какой из них лучше?

Оба решают одну задачу, но написаны по-разному.

Как понять, эффективнее ли первый код или второй?

Критериев может быть несколько.

Например, первый код может быть читаемее, или второй — проще для восприятия.

Но с точки зрения Big O, мы можем математически определить, какой код работает эффективнее.

Предположим, мы замеряем время выполнения.

Допустим, первый код выполняется за 30 секунд, а второй — за 60.

Очевидно, первый код работает быстрее, а значит, он эффективнее.

Таким образом, код первый лучше кода второго.

Это и есть анализ временной сложности.»

6. Операции vs. реальное время
«Однако при оценке временной сложности мы измеряем не время, а количество операций.

Причина в том, что один и тот же код на быстром компьютере выполнится быстрее, чем на медленном.

Но количество операций останется неизменным.

Таким образом, Big O позволяет оценить именно число операций, независимо от мощности компьютера.»

7. Пространственная сложность
«Есть ещё понятие пространственной сложности, которую также оценивают через Big O.

Пространственная сложность — это объём памяти, который использует код.

Например, код первый может выполняться быстрее (30 секунд), но потреблять больше памяти.

Код второй, хоть и медленнее (60 секунд), использует меньше памяти.

С точки зрения пространственной сложности, код второй лучше, так как он экономит ресурсы.»